/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icebreaker.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.osp.icebreaker.model.OSPCluster;
import com.osp.icebreaker.model.OSPClusterModel;
import com.osp.icebreaker.model.OSPClusterSoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the OSPCluster service. Represents a row in the &quot;ICEBREAKER_OSPCluster&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>OSPClusterModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link OSPClusterImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see OSPClusterImpl
 * @generated
 */
@JSON(strict = true)
public class OSPClusterModelImpl
	extends BaseModelImpl<OSPCluster> implements OSPClusterModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a osp cluster model instance should use the <code>OSPCluster</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICEBREAKER_OSPCluster";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"clusterId", Types.BIGINT},
		{"companyId", Types.BIGINT}, {"groupId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"clusterName", Types.VARCHAR},
		{"osFamily", Types.VARCHAR}, {"osName", Types.VARCHAR},
		{"osVersion", Types.VARCHAR}, {"appRootDir", Types.VARCHAR},
		{"description", Types.VARCHAR}, {"serverIp", Types.VARCHAR},
		{"sshPort", Types.VARCHAR}, {"identificationCommand", Types.VARCHAR},
		{"accessMethod", Types.VARCHAR}, {"authorizedId", Types.VARCHAR},
		{"authorizedPassword", Types.VARCHAR}, {"schedulerName", Types.VARCHAR},
		{"schedulerVersion", Types.VARCHAR}, {"schedulerClass", Types.VARCHAR},
		{"schedulerStatus", Types.INTEGER}, {"securityLevel", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("clusterId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("clusterName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osFamily", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("osVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("appRootDir", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("serverIp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("sshPort", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("identificationCommand", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("accessMethod", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("authorizedPassword", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulerName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulerVersion", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulerClass", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("schedulerStatus", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("securityLevel", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICEBREAKER_OSPCluster (uuid_ VARCHAR(75) null,clusterId LONG not null primary key,companyId LONG,groupId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,clusterName VARCHAR(75) null,osFamily VARCHAR(75) null,osName VARCHAR(75) null,osVersion VARCHAR(75) null,appRootDir VARCHAR(75) null,description STRING null,serverIp VARCHAR(75) null,sshPort VARCHAR(75) null,identificationCommand VARCHAR(75) null,accessMethod VARCHAR(75) null,authorizedId VARCHAR(75) null,authorizedPassword VARCHAR(75) null,schedulerName VARCHAR(75) null,schedulerVersion VARCHAR(75) null,schedulerClass VARCHAR(75) null,schedulerStatus INTEGER,securityLevel VARCHAR(75) null)";

	public static final String TABLE_SQL_DROP =
		"drop table ICEBREAKER_OSPCluster";

	public static final String ORDER_BY_JPQL =
		" ORDER BY ospCluster.clusterName ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICEBREAKER_OSPCluster.clusterName ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long CLUSTERNAME_COLUMN_BITMASK = 1L;

	public static final long COMPANYID_COLUMN_BITMASK = 2L;

	public static final long GROUPID_COLUMN_BITMASK = 4L;

	public static final long OSNAME_COLUMN_BITMASK = 8L;

	public static final long STATUS_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static OSPCluster toModel(OSPClusterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		OSPCluster model = new OSPClusterImpl();

		model.setUuid(soapModel.getUuid());
		model.setClusterId(soapModel.getClusterId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setGroupId(soapModel.getGroupId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setClusterName(soapModel.getClusterName());
		model.setOsFamily(soapModel.getOsFamily());
		model.setOsName(soapModel.getOsName());
		model.setOsVersion(soapModel.getOsVersion());
		model.setAppRootDir(soapModel.getAppRootDir());
		model.setDescription(soapModel.getDescription());
		model.setServerIp(soapModel.getServerIp());
		model.setSshPort(soapModel.getSshPort());
		model.setIdentificationCommand(soapModel.getIdentificationCommand());
		model.setAccessMethod(soapModel.getAccessMethod());
		model.setAuthorizedId(soapModel.getAuthorizedId());
		model.setAuthorizedPassword(soapModel.getAuthorizedPassword());
		model.setSchedulerName(soapModel.getSchedulerName());
		model.setSchedulerVersion(soapModel.getSchedulerVersion());
		model.setSchedulerClass(soapModel.getSchedulerClass());
		model.setSchedulerStatus(soapModel.getSchedulerStatus());
		model.setSecurityLevel(soapModel.getSecurityLevel());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<OSPCluster> toModels(OSPClusterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<OSPCluster> models = new ArrayList<OSPCluster>(soapModels.length);

		for (OSPClusterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public OSPClusterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _clusterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setClusterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _clusterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return OSPCluster.class;
	}

	@Override
	public String getModelClassName() {
		return OSPCluster.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<OSPCluster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<OSPCluster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSPCluster, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName, attributeGetterFunction.apply((OSPCluster)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<OSPCluster, Object>> attributeSetterBiConsumers =
			getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<OSPCluster, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(OSPCluster)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<OSPCluster, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<OSPCluster, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, OSPCluster>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			OSPCluster.class.getClassLoader(), OSPCluster.class,
			ModelWrapper.class);

		try {
			Constructor<OSPCluster> constructor =
				(Constructor<OSPCluster>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<OSPCluster, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<OSPCluster, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<OSPCluster, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<OSPCluster, Object>>();
		Map<String, BiConsumer<OSPCluster, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<OSPCluster, ?>>();

		attributeGetterFunctions.put("uuid", OSPCluster::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<OSPCluster, String>)OSPCluster::setUuid);
		attributeGetterFunctions.put("clusterId", OSPCluster::getClusterId);
		attributeSetterBiConsumers.put(
			"clusterId",
			(BiConsumer<OSPCluster, Long>)OSPCluster::setClusterId);
		attributeGetterFunctions.put("companyId", OSPCluster::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<OSPCluster, Long>)OSPCluster::setCompanyId);
		attributeGetterFunctions.put("groupId", OSPCluster::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId", (BiConsumer<OSPCluster, Long>)OSPCluster::setGroupId);
		attributeGetterFunctions.put("userId", OSPCluster::getUserId);
		attributeSetterBiConsumers.put(
			"userId", (BiConsumer<OSPCluster, Long>)OSPCluster::setUserId);
		attributeGetterFunctions.put("userName", OSPCluster::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<OSPCluster, String>)OSPCluster::setUserName);
		attributeGetterFunctions.put("createDate", OSPCluster::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<OSPCluster, Date>)OSPCluster::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", OSPCluster::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<OSPCluster, Date>)OSPCluster::setModifiedDate);
		attributeGetterFunctions.put("status", OSPCluster::getStatus);
		attributeSetterBiConsumers.put(
			"status", (BiConsumer<OSPCluster, Integer>)OSPCluster::setStatus);
		attributeGetterFunctions.put("clusterName", OSPCluster::getClusterName);
		attributeSetterBiConsumers.put(
			"clusterName",
			(BiConsumer<OSPCluster, String>)OSPCluster::setClusterName);
		attributeGetterFunctions.put("osFamily", OSPCluster::getOsFamily);
		attributeSetterBiConsumers.put(
			"osFamily",
			(BiConsumer<OSPCluster, String>)OSPCluster::setOsFamily);
		attributeGetterFunctions.put("osName", OSPCluster::getOsName);
		attributeSetterBiConsumers.put(
			"osName", (BiConsumer<OSPCluster, String>)OSPCluster::setOsName);
		attributeGetterFunctions.put("osVersion", OSPCluster::getOsVersion);
		attributeSetterBiConsumers.put(
			"osVersion",
			(BiConsumer<OSPCluster, String>)OSPCluster::setOsVersion);
		attributeGetterFunctions.put("appRootDir", OSPCluster::getAppRootDir);
		attributeSetterBiConsumers.put(
			"appRootDir",
			(BiConsumer<OSPCluster, String>)OSPCluster::setAppRootDir);
		attributeGetterFunctions.put("description", OSPCluster::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<OSPCluster, String>)OSPCluster::setDescription);
		attributeGetterFunctions.put("serverIp", OSPCluster::getServerIp);
		attributeSetterBiConsumers.put(
			"serverIp",
			(BiConsumer<OSPCluster, String>)OSPCluster::setServerIp);
		attributeGetterFunctions.put("sshPort", OSPCluster::getSshPort);
		attributeSetterBiConsumers.put(
			"sshPort", (BiConsumer<OSPCluster, String>)OSPCluster::setSshPort);
		attributeGetterFunctions.put(
			"identificationCommand", OSPCluster::getIdentificationCommand);
		attributeSetterBiConsumers.put(
			"identificationCommand",
			(BiConsumer<OSPCluster, String>)
				OSPCluster::setIdentificationCommand);
		attributeGetterFunctions.put(
			"accessMethod", OSPCluster::getAccessMethod);
		attributeSetterBiConsumers.put(
			"accessMethod",
			(BiConsumer<OSPCluster, String>)OSPCluster::setAccessMethod);
		attributeGetterFunctions.put(
			"authorizedId", OSPCluster::getAuthorizedId);
		attributeSetterBiConsumers.put(
			"authorizedId",
			(BiConsumer<OSPCluster, String>)OSPCluster::setAuthorizedId);
		attributeGetterFunctions.put(
			"authorizedPassword", OSPCluster::getAuthorizedPassword);
		attributeSetterBiConsumers.put(
			"authorizedPassword",
			(BiConsumer<OSPCluster, String>)OSPCluster::setAuthorizedPassword);
		attributeGetterFunctions.put(
			"schedulerName", OSPCluster::getSchedulerName);
		attributeSetterBiConsumers.put(
			"schedulerName",
			(BiConsumer<OSPCluster, String>)OSPCluster::setSchedulerName);
		attributeGetterFunctions.put(
			"schedulerVersion", OSPCluster::getSchedulerVersion);
		attributeSetterBiConsumers.put(
			"schedulerVersion",
			(BiConsumer<OSPCluster, String>)OSPCluster::setSchedulerVersion);
		attributeGetterFunctions.put(
			"schedulerClass", OSPCluster::getSchedulerClass);
		attributeSetterBiConsumers.put(
			"schedulerClass",
			(BiConsumer<OSPCluster, String>)OSPCluster::setSchedulerClass);
		attributeGetterFunctions.put(
			"schedulerStatus", OSPCluster::getSchedulerStatus);
		attributeSetterBiConsumers.put(
			"schedulerStatus",
			(BiConsumer<OSPCluster, Integer>)OSPCluster::setSchedulerStatus);
		attributeGetterFunctions.put(
			"securityLevel", OSPCluster::getSecurityLevel);
		attributeSetterBiConsumers.put(
			"securityLevel",
			(BiConsumer<OSPCluster, String>)OSPCluster::setSecurityLevel);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getClusterId() {
		return _clusterId;
	}

	@Override
	public void setClusterId(long clusterId) {
		_clusterId = clusterId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getClusterName() {
		if (_clusterName == null) {
			return "";
		}
		else {
			return _clusterName;
		}
	}

	@Override
	public void setClusterName(String clusterName) {
		_columnBitmask = -1L;

		if (_originalClusterName == null) {
			_originalClusterName = _clusterName;
		}

		_clusterName = clusterName;
	}

	public String getOriginalClusterName() {
		return GetterUtil.getString(_originalClusterName);
	}

	@JSON
	@Override
	public String getOsFamily() {
		if (_osFamily == null) {
			return "";
		}
		else {
			return _osFamily;
		}
	}

	@Override
	public void setOsFamily(String osFamily) {
		_osFamily = osFamily;
	}

	@JSON
	@Override
	public String getOsName() {
		if (_osName == null) {
			return "";
		}
		else {
			return _osName;
		}
	}

	@Override
	public void setOsName(String osName) {
		_columnBitmask |= OSNAME_COLUMN_BITMASK;

		if (_originalOsName == null) {
			_originalOsName = _osName;
		}

		_osName = osName;
	}

	public String getOriginalOsName() {
		return GetterUtil.getString(_originalOsName);
	}

	@JSON
	@Override
	public String getOsVersion() {
		if (_osVersion == null) {
			return "";
		}
		else {
			return _osVersion;
		}
	}

	@Override
	public void setOsVersion(String osVersion) {
		_osVersion = osVersion;
	}

	@JSON
	@Override
	public String getAppRootDir() {
		if (_appRootDir == null) {
			return "";
		}
		else {
			return _appRootDir;
		}
	}

	@Override
	public void setAppRootDir(String appRootDir) {
		_appRootDir = appRootDir;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@JSON
	@Override
	public String getServerIp() {
		if (_serverIp == null) {
			return "";
		}
		else {
			return _serverIp;
		}
	}

	@Override
	public void setServerIp(String serverIp) {
		_serverIp = serverIp;
	}

	@JSON
	@Override
	public String getSshPort() {
		if (_sshPort == null) {
			return "";
		}
		else {
			return _sshPort;
		}
	}

	@Override
	public void setSshPort(String sshPort) {
		_sshPort = sshPort;
	}

	@JSON
	@Override
	public String getIdentificationCommand() {
		if (_identificationCommand == null) {
			return "";
		}
		else {
			return _identificationCommand;
		}
	}

	@Override
	public void setIdentificationCommand(String identificationCommand) {
		_identificationCommand = identificationCommand;
	}

	@JSON
	@Override
	public String getAccessMethod() {
		if (_accessMethod == null) {
			return "";
		}
		else {
			return _accessMethod;
		}
	}

	@Override
	public void setAccessMethod(String accessMethod) {
		_accessMethod = accessMethod;
	}

	@JSON
	@Override
	public String getAuthorizedId() {
		if (_authorizedId == null) {
			return "";
		}
		else {
			return _authorizedId;
		}
	}

	@Override
	public void setAuthorizedId(String authorizedId) {
		_authorizedId = authorizedId;
	}

	@JSON
	@Override
	public String getAuthorizedPassword() {
		if (_authorizedPassword == null) {
			return "";
		}
		else {
			return _authorizedPassword;
		}
	}

	@Override
	public void setAuthorizedPassword(String authorizedPassword) {
		_authorizedPassword = authorizedPassword;
	}

	@JSON
	@Override
	public String getSchedulerName() {
		if (_schedulerName == null) {
			return "";
		}
		else {
			return _schedulerName;
		}
	}

	@Override
	public void setSchedulerName(String schedulerName) {
		_schedulerName = schedulerName;
	}

	@JSON
	@Override
	public String getSchedulerVersion() {
		if (_schedulerVersion == null) {
			return "";
		}
		else {
			return _schedulerVersion;
		}
	}

	@Override
	public void setSchedulerVersion(String schedulerVersion) {
		_schedulerVersion = schedulerVersion;
	}

	@JSON
	@Override
	public String getSchedulerClass() {
		if (_schedulerClass == null) {
			return "";
		}
		else {
			return _schedulerClass;
		}
	}

	@Override
	public void setSchedulerClass(String schedulerClass) {
		_schedulerClass = schedulerClass;
	}

	@JSON
	@Override
	public int getSchedulerStatus() {
		return _schedulerStatus;
	}

	@Override
	public void setSchedulerStatus(int schedulerStatus) {
		_schedulerStatus = schedulerStatus;
	}

	@JSON
	@Override
	public String getSecurityLevel() {
		if (_securityLevel == null) {
			return "";
		}
		else {
			return _securityLevel;
		}
	}

	@Override
	public void setSecurityLevel(String securityLevel) {
		_securityLevel = securityLevel;
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(OSPCluster.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), OSPCluster.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			OSPCluster.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public OSPCluster toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, OSPCluster>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		OSPClusterImpl ospClusterImpl = new OSPClusterImpl();

		ospClusterImpl.setUuid(getUuid());
		ospClusterImpl.setClusterId(getClusterId());
		ospClusterImpl.setCompanyId(getCompanyId());
		ospClusterImpl.setGroupId(getGroupId());
		ospClusterImpl.setUserId(getUserId());
		ospClusterImpl.setUserName(getUserName());
		ospClusterImpl.setCreateDate(getCreateDate());
		ospClusterImpl.setModifiedDate(getModifiedDate());
		ospClusterImpl.setStatus(getStatus());
		ospClusterImpl.setClusterName(getClusterName());
		ospClusterImpl.setOsFamily(getOsFamily());
		ospClusterImpl.setOsName(getOsName());
		ospClusterImpl.setOsVersion(getOsVersion());
		ospClusterImpl.setAppRootDir(getAppRootDir());
		ospClusterImpl.setDescription(getDescription());
		ospClusterImpl.setServerIp(getServerIp());
		ospClusterImpl.setSshPort(getSshPort());
		ospClusterImpl.setIdentificationCommand(getIdentificationCommand());
		ospClusterImpl.setAccessMethod(getAccessMethod());
		ospClusterImpl.setAuthorizedId(getAuthorizedId());
		ospClusterImpl.setAuthorizedPassword(getAuthorizedPassword());
		ospClusterImpl.setSchedulerName(getSchedulerName());
		ospClusterImpl.setSchedulerVersion(getSchedulerVersion());
		ospClusterImpl.setSchedulerClass(getSchedulerClass());
		ospClusterImpl.setSchedulerStatus(getSchedulerStatus());
		ospClusterImpl.setSecurityLevel(getSecurityLevel());

		ospClusterImpl.resetOriginalValues();

		return ospClusterImpl;
	}

	@Override
	public int compareTo(OSPCluster ospCluster) {
		int value = 0;

		value = getClusterName().compareTo(ospCluster.getClusterName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof OSPCluster)) {
			return false;
		}

		OSPCluster ospCluster = (OSPCluster)obj;

		long primaryKey = ospCluster.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		OSPClusterModelImpl ospClusterModelImpl = this;

		ospClusterModelImpl._originalUuid = ospClusterModelImpl._uuid;

		ospClusterModelImpl._originalCompanyId = ospClusterModelImpl._companyId;

		ospClusterModelImpl._setOriginalCompanyId = false;

		ospClusterModelImpl._originalGroupId = ospClusterModelImpl._groupId;

		ospClusterModelImpl._setOriginalGroupId = false;

		ospClusterModelImpl._setModifiedDate = false;

		ospClusterModelImpl._originalStatus = ospClusterModelImpl._status;

		ospClusterModelImpl._setOriginalStatus = false;

		ospClusterModelImpl._originalClusterName =
			ospClusterModelImpl._clusterName;

		ospClusterModelImpl._originalOsName = ospClusterModelImpl._osName;

		ospClusterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<OSPCluster> toCacheModel() {
		OSPClusterCacheModel ospClusterCacheModel = new OSPClusterCacheModel();

		ospClusterCacheModel.uuid = getUuid();

		String uuid = ospClusterCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			ospClusterCacheModel.uuid = null;
		}

		ospClusterCacheModel.clusterId = getClusterId();

		ospClusterCacheModel.companyId = getCompanyId();

		ospClusterCacheModel.groupId = getGroupId();

		ospClusterCacheModel.userId = getUserId();

		ospClusterCacheModel.userName = getUserName();

		String userName = ospClusterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			ospClusterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			ospClusterCacheModel.createDate = createDate.getTime();
		}
		else {
			ospClusterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			ospClusterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			ospClusterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		ospClusterCacheModel.status = getStatus();

		ospClusterCacheModel.clusterName = getClusterName();

		String clusterName = ospClusterCacheModel.clusterName;

		if ((clusterName != null) && (clusterName.length() == 0)) {
			ospClusterCacheModel.clusterName = null;
		}

		ospClusterCacheModel.osFamily = getOsFamily();

		String osFamily = ospClusterCacheModel.osFamily;

		if ((osFamily != null) && (osFamily.length() == 0)) {
			ospClusterCacheModel.osFamily = null;
		}

		ospClusterCacheModel.osName = getOsName();

		String osName = ospClusterCacheModel.osName;

		if ((osName != null) && (osName.length() == 0)) {
			ospClusterCacheModel.osName = null;
		}

		ospClusterCacheModel.osVersion = getOsVersion();

		String osVersion = ospClusterCacheModel.osVersion;

		if ((osVersion != null) && (osVersion.length() == 0)) {
			ospClusterCacheModel.osVersion = null;
		}

		ospClusterCacheModel.appRootDir = getAppRootDir();

		String appRootDir = ospClusterCacheModel.appRootDir;

		if ((appRootDir != null) && (appRootDir.length() == 0)) {
			ospClusterCacheModel.appRootDir = null;
		}

		ospClusterCacheModel.description = getDescription();

		String description = ospClusterCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			ospClusterCacheModel.description = null;
		}

		ospClusterCacheModel.serverIp = getServerIp();

		String serverIp = ospClusterCacheModel.serverIp;

		if ((serverIp != null) && (serverIp.length() == 0)) {
			ospClusterCacheModel.serverIp = null;
		}

		ospClusterCacheModel.sshPort = getSshPort();

		String sshPort = ospClusterCacheModel.sshPort;

		if ((sshPort != null) && (sshPort.length() == 0)) {
			ospClusterCacheModel.sshPort = null;
		}

		ospClusterCacheModel.identificationCommand = getIdentificationCommand();

		String identificationCommand =
			ospClusterCacheModel.identificationCommand;

		if ((identificationCommand != null) &&
			(identificationCommand.length() == 0)) {

			ospClusterCacheModel.identificationCommand = null;
		}

		ospClusterCacheModel.accessMethod = getAccessMethod();

		String accessMethod = ospClusterCacheModel.accessMethod;

		if ((accessMethod != null) && (accessMethod.length() == 0)) {
			ospClusterCacheModel.accessMethod = null;
		}

		ospClusterCacheModel.authorizedId = getAuthorizedId();

		String authorizedId = ospClusterCacheModel.authorizedId;

		if ((authorizedId != null) && (authorizedId.length() == 0)) {
			ospClusterCacheModel.authorizedId = null;
		}

		ospClusterCacheModel.authorizedPassword = getAuthorizedPassword();

		String authorizedPassword = ospClusterCacheModel.authorizedPassword;

		if ((authorizedPassword != null) &&
			(authorizedPassword.length() == 0)) {

			ospClusterCacheModel.authorizedPassword = null;
		}

		ospClusterCacheModel.schedulerName = getSchedulerName();

		String schedulerName = ospClusterCacheModel.schedulerName;

		if ((schedulerName != null) && (schedulerName.length() == 0)) {
			ospClusterCacheModel.schedulerName = null;
		}

		ospClusterCacheModel.schedulerVersion = getSchedulerVersion();

		String schedulerVersion = ospClusterCacheModel.schedulerVersion;

		if ((schedulerVersion != null) && (schedulerVersion.length() == 0)) {
			ospClusterCacheModel.schedulerVersion = null;
		}

		ospClusterCacheModel.schedulerClass = getSchedulerClass();

		String schedulerClass = ospClusterCacheModel.schedulerClass;

		if ((schedulerClass != null) && (schedulerClass.length() == 0)) {
			ospClusterCacheModel.schedulerClass = null;
		}

		ospClusterCacheModel.schedulerStatus = getSchedulerStatus();

		ospClusterCacheModel.securityLevel = getSecurityLevel();

		String securityLevel = ospClusterCacheModel.securityLevel;

		if ((securityLevel != null) && (securityLevel.length() == 0)) {
			ospClusterCacheModel.securityLevel = null;
		}

		return ospClusterCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<OSPCluster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<OSPCluster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSPCluster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((OSPCluster)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<OSPCluster, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<OSPCluster, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<OSPCluster, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((OSPCluster)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, OSPCluster>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _clusterId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _userId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _clusterName;
	private String _originalClusterName;
	private String _osFamily;
	private String _osName;
	private String _originalOsName;
	private String _osVersion;
	private String _appRootDir;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private String _serverIp;
	private String _sshPort;
	private String _identificationCommand;
	private String _accessMethod;
	private String _authorizedId;
	private String _authorizedPassword;
	private String _schedulerName;
	private String _schedulerVersion;
	private String _schedulerClass;
	private int _schedulerStatus;
	private String _securityLevel;
	private long _columnBitmask;
	private OSPCluster _escapedModel;

}