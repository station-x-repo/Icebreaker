/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.osp.icebreaker.model.impl;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.exportimport.kernel.lar.StagedModelType;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.LocaleException;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.DateUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.PortalUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.Validator;

import com.osp.icebreaker.model.IcebreakerEntry;
import com.osp.icebreaker.model.IcebreakerEntryModel;
import com.osp.icebreaker.model.IcebreakerEntrySoap;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the IcebreakerEntry service. Represents a row in the &quot;ICEBREAKER_IcebreakerEntry&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>IcebreakerEntryModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link IcebreakerEntryImpl}.
 * </p>
 *
 * @author Jerry H. Seo
 * @see IcebreakerEntryImpl
 * @generated
 */
@JSON(strict = true)
public class IcebreakerEntryModelImpl
	extends BaseModelImpl<IcebreakerEntry> implements IcebreakerEntryModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a icebreaker entry model instance should use the <code>IcebreakerEntry</code> interface instead.
	 */
	public static final String TABLE_NAME = "ICEBREAKER_IcebreakerEntry";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"icebreakerEntryId", Types.BIGINT},
		{"groupId", Types.BIGINT}, {"companyId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"userName", Types.VARCHAR},
		{"createDate", Types.TIMESTAMP}, {"modifiedDate", Types.TIMESTAMP},
		{"status", Types.INTEGER}, {"name", Types.VARCHAR},
		{"type_", Types.VARCHAR}, {"ibIp", Types.VARCHAR},
		{"ibPort", Types.VARCHAR}, {"ibUserId", Types.VARCHAR},
		{"ibUserPassword", Types.VARCHAR}, {"description", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("icebreakerEntryId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("groupId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("companyId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userName", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("createDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("modifiedDate", Types.TIMESTAMP);
		TABLE_COLUMNS_MAP.put("status", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("name", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("type_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ibIp", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ibPort", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ibUserId", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("ibUserPassword", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("description", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table ICEBREAKER_IcebreakerEntry (uuid_ VARCHAR(75) null,icebreakerEntryId LONG not null primary key,groupId LONG,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,status INTEGER,name VARCHAR(75) null,type_ VARCHAR(75) null,ibIp VARCHAR(75) null,ibPort VARCHAR(75) null,ibUserId VARCHAR(75) null,ibUserPassword VARCHAR(75) null,description STRING null)";

	public static final String TABLE_SQL_DROP =
		"drop table ICEBREAKER_IcebreakerEntry";

	public static final String ORDER_BY_JPQL =
		" ORDER BY icebreakerEntry.createDate ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY ICEBREAKER_IcebreakerEntry.createDate ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long COMPANYID_COLUMN_BITMASK = 1L;

	public static final long GROUPID_COLUMN_BITMASK = 2L;

	public static final long STATUS_COLUMN_BITMASK = 4L;

	public static final long TYPE_COLUMN_BITMASK = 8L;

	public static final long USERID_COLUMN_BITMASK = 16L;

	public static final long UUID_COLUMN_BITMASK = 32L;

	public static final long CREATEDATE_COLUMN_BITMASK = 64L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static IcebreakerEntry toModel(IcebreakerEntrySoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		IcebreakerEntry model = new IcebreakerEntryImpl();

		model.setUuid(soapModel.getUuid());
		model.setIcebreakerEntryId(soapModel.getIcebreakerEntryId());
		model.setGroupId(soapModel.getGroupId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setStatus(soapModel.getStatus());
		model.setName(soapModel.getName());
		model.setType(soapModel.getType());
		model.setIbIp(soapModel.getIbIp());
		model.setIbPort(soapModel.getIbPort());
		model.setIbUserId(soapModel.getIbUserId());
		model.setIbUserPassword(soapModel.getIbUserPassword());
		model.setDescription(soapModel.getDescription());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<IcebreakerEntry> toModels(
		IcebreakerEntrySoap[] soapModels) {

		if (soapModels == null) {
			return null;
		}

		List<IcebreakerEntry> models = new ArrayList<IcebreakerEntry>(
			soapModels.length);

		for (IcebreakerEntrySoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public IcebreakerEntryModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _icebreakerEntryId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setIcebreakerEntryId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _icebreakerEntryId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return IcebreakerEntry.class;
	}

	@Override
	public String getModelClassName() {
		return IcebreakerEntry.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<IcebreakerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		for (Map.Entry<String, Function<IcebreakerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IcebreakerEntry, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((IcebreakerEntry)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<IcebreakerEntry, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<IcebreakerEntry, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(IcebreakerEntry)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<IcebreakerEntry, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<IcebreakerEntry, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, IcebreakerEntry>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			IcebreakerEntry.class.getClassLoader(), IcebreakerEntry.class,
			ModelWrapper.class);

		try {
			Constructor<IcebreakerEntry> constructor =
				(Constructor<IcebreakerEntry>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<IcebreakerEntry, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<IcebreakerEntry, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<IcebreakerEntry, Object>>
			attributeGetterFunctions =
				new LinkedHashMap<String, Function<IcebreakerEntry, Object>>();
		Map<String, BiConsumer<IcebreakerEntry, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<IcebreakerEntry, ?>>();

		attributeGetterFunctions.put("uuid", IcebreakerEntry::getUuid);
		attributeSetterBiConsumers.put(
			"uuid",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setUuid);
		attributeGetterFunctions.put(
			"icebreakerEntryId", IcebreakerEntry::getIcebreakerEntryId);
		attributeSetterBiConsumers.put(
			"icebreakerEntryId",
			(BiConsumer<IcebreakerEntry, Long>)
				IcebreakerEntry::setIcebreakerEntryId);
		attributeGetterFunctions.put("groupId", IcebreakerEntry::getGroupId);
		attributeSetterBiConsumers.put(
			"groupId",
			(BiConsumer<IcebreakerEntry, Long>)IcebreakerEntry::setGroupId);
		attributeGetterFunctions.put(
			"companyId", IcebreakerEntry::getCompanyId);
		attributeSetterBiConsumers.put(
			"companyId",
			(BiConsumer<IcebreakerEntry, Long>)IcebreakerEntry::setCompanyId);
		attributeGetterFunctions.put("userId", IcebreakerEntry::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<IcebreakerEntry, Long>)IcebreakerEntry::setUserId);
		attributeGetterFunctions.put("userName", IcebreakerEntry::getUserName);
		attributeSetterBiConsumers.put(
			"userName",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setUserName);
		attributeGetterFunctions.put(
			"createDate", IcebreakerEntry::getCreateDate);
		attributeSetterBiConsumers.put(
			"createDate",
			(BiConsumer<IcebreakerEntry, Date>)IcebreakerEntry::setCreateDate);
		attributeGetterFunctions.put(
			"modifiedDate", IcebreakerEntry::getModifiedDate);
		attributeSetterBiConsumers.put(
			"modifiedDate",
			(BiConsumer<IcebreakerEntry, Date>)
				IcebreakerEntry::setModifiedDate);
		attributeGetterFunctions.put("status", IcebreakerEntry::getStatus);
		attributeSetterBiConsumers.put(
			"status",
			(BiConsumer<IcebreakerEntry, Integer>)IcebreakerEntry::setStatus);
		attributeGetterFunctions.put("name", IcebreakerEntry::getName);
		attributeSetterBiConsumers.put(
			"name",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setName);
		attributeGetterFunctions.put("type", IcebreakerEntry::getType);
		attributeSetterBiConsumers.put(
			"type",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setType);
		attributeGetterFunctions.put("ibIp", IcebreakerEntry::getIbIp);
		attributeSetterBiConsumers.put(
			"ibIp",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setIbIp);
		attributeGetterFunctions.put("ibPort", IcebreakerEntry::getIbPort);
		attributeSetterBiConsumers.put(
			"ibPort",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setIbPort);
		attributeGetterFunctions.put("ibUserId", IcebreakerEntry::getIbUserId);
		attributeSetterBiConsumers.put(
			"ibUserId",
			(BiConsumer<IcebreakerEntry, String>)IcebreakerEntry::setIbUserId);
		attributeGetterFunctions.put(
			"ibUserPassword", IcebreakerEntry::getIbUserPassword);
		attributeSetterBiConsumers.put(
			"ibUserPassword",
			(BiConsumer<IcebreakerEntry, String>)
				IcebreakerEntry::setIbUserPassword);
		attributeGetterFunctions.put(
			"description", IcebreakerEntry::getDescription);
		attributeSetterBiConsumers.put(
			"description",
			(BiConsumer<IcebreakerEntry, String>)
				IcebreakerEntry::setDescription);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@JSON
	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@JSON
	@Override
	public long getIcebreakerEntryId() {
		return _icebreakerEntryId;
	}

	@Override
	public void setIcebreakerEntryId(long icebreakerEntryId) {
		_icebreakerEntryId = icebreakerEntryId;
	}

	@JSON
	@Override
	public long getGroupId() {
		return _groupId;
	}

	@Override
	public void setGroupId(long groupId) {
		_columnBitmask |= GROUPID_COLUMN_BITMASK;

		if (!_setOriginalGroupId) {
			_setOriginalGroupId = true;

			_originalGroupId = _groupId;
		}

		_groupId = groupId;
	}

	public long getOriginalGroupId() {
		return _originalGroupId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_columnBitmask |= COMPANYID_COLUMN_BITMASK;

		if (!_setOriginalCompanyId) {
			_setOriginalCompanyId = true;

			_originalCompanyId = _companyId;
		}

		_companyId = companyId;
	}

	public long getOriginalCompanyId() {
		return _originalCompanyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask |= USERID_COLUMN_BITMASK;

		if (!_setOriginalUserId) {
			_setOriginalUserId = true;

			_originalUserId = _userId;
		}

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	public long getOriginalUserId() {
		return _originalUserId;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return "";
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_columnBitmask = -1L;

		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	public boolean hasSetModifiedDate() {
		return _setModifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_setModifiedDate = true;

		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public int getStatus() {
		return _status;
	}

	@Override
	public void setStatus(int status) {
		_columnBitmask |= STATUS_COLUMN_BITMASK;

		if (!_setOriginalStatus) {
			_setOriginalStatus = true;

			_originalStatus = _status;
		}

		_status = status;
	}

	public int getOriginalStatus() {
		return _originalStatus;
	}

	@JSON
	@Override
	public String getName() {
		if (_name == null) {
			return "";
		}
		else {
			return _name;
		}
	}

	@Override
	public void setName(String name) {
		_name = name;
	}

	@JSON
	@Override
	public String getType() {
		if (_type == null) {
			return "";
		}
		else {
			return _type;
		}
	}

	@Override
	public void setType(String type) {
		_columnBitmask |= TYPE_COLUMN_BITMASK;

		if (_originalType == null) {
			_originalType = _type;
		}

		_type = type;
	}

	public String getOriginalType() {
		return GetterUtil.getString(_originalType);
	}

	@JSON
	@Override
	public String getIbIp() {
		if (_ibIp == null) {
			return "";
		}
		else {
			return _ibIp;
		}
	}

	@Override
	public void setIbIp(String ibIp) {
		_ibIp = ibIp;
	}

	@JSON
	@Override
	public String getIbPort() {
		if (_ibPort == null) {
			return "";
		}
		else {
			return _ibPort;
		}
	}

	@Override
	public void setIbPort(String ibPort) {
		_ibPort = ibPort;
	}

	@JSON
	@Override
	public String getIbUserId() {
		if (_ibUserId == null) {
			return "";
		}
		else {
			return _ibUserId;
		}
	}

	@Override
	public void setIbUserId(String ibUserId) {
		_ibUserId = ibUserId;
	}

	@JSON
	@Override
	public String getIbUserPassword() {
		if (_ibUserPassword == null) {
			return "";
		}
		else {
			return _ibUserPassword;
		}
	}

	@Override
	public void setIbUserPassword(String ibUserPassword) {
		_ibUserPassword = ibUserPassword;
	}

	@JSON
	@Override
	public String getDescription() {
		if (_description == null) {
			return "";
		}
		else {
			return _description;
		}
	}

	@Override
	public String getDescription(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId);
	}

	@Override
	public String getDescription(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getDescription(languageId, useDefault);
	}

	@Override
	public String getDescription(String languageId) {
		return LocalizationUtil.getLocalization(getDescription(), languageId);
	}

	@Override
	public String getDescription(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(
			getDescription(), languageId, useDefault);
	}

	@Override
	public String getDescriptionCurrentLanguageId() {
		return _descriptionCurrentLanguageId;
	}

	@JSON
	@Override
	public String getDescriptionCurrentValue() {
		Locale locale = getLocale(_descriptionCurrentLanguageId);

		return getDescription(locale);
	}

	@Override
	public Map<Locale, String> getDescriptionMap() {
		return LocalizationUtil.getLocalizationMap(getDescription());
	}

	@Override
	public void setDescription(String description) {
		_description = description;
	}

	@Override
	public void setDescription(String description, Locale locale) {
		setDescription(description, locale, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescription(
		String description, Locale locale, Locale defaultLocale) {

		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(description)) {
			setDescription(
				LocalizationUtil.updateLocalization(
					getDescription(), "Description", description, languageId,
					defaultLanguageId));
		}
		else {
			setDescription(
				LocalizationUtil.removeLocalization(
					getDescription(), "Description", languageId));
		}
	}

	@Override
	public void setDescriptionCurrentLanguageId(String languageId) {
		_descriptionCurrentLanguageId = languageId;
	}

	@Override
	public void setDescriptionMap(Map<Locale, String> descriptionMap) {
		setDescriptionMap(descriptionMap, LocaleUtil.getSiteDefault());
	}

	@Override
	public void setDescriptionMap(
		Map<Locale, String> descriptionMap, Locale defaultLocale) {

		if (descriptionMap == null) {
			return;
		}

		setDescription(
			LocalizationUtil.updateLocalization(
				descriptionMap, getDescription(), "Description",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public StagedModelType getStagedModelType() {
		return new StagedModelType(
			PortalUtil.getClassNameId(IcebreakerEntry.class.getName()));
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			getCompanyId(), IcebreakerEntry.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> descriptionMap = getDescriptionMap();

		for (Map.Entry<Locale, String> entry : descriptionMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(
			new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getDescription();

		if (xml == null) {
			return "";
		}

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		Locale defaultLocale = LocaleUtil.fromLanguageId(
			getDefaultLanguageId());

		Locale[] availableLocales = LocaleUtil.fromLanguageIds(
			getAvailableLanguageIds());

		Locale defaultImportLocale = LocalizationUtil.getDefaultImportLocale(
			IcebreakerEntry.class.getName(), getPrimaryKey(), defaultLocale,
			availableLocales);

		prepareLocalizedFieldsForImport(defaultImportLocale);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {

		Locale defaultLocale = LocaleUtil.getSiteDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String description = getDescription(defaultLocale);

		if (Validator.isNull(description)) {
			setDescription(
				getDescription(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setDescription(
				getDescription(defaultLocale), defaultLocale, defaultLocale);
		}
	}

	@Override
	public IcebreakerEntry toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, IcebreakerEntry>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		IcebreakerEntryImpl icebreakerEntryImpl = new IcebreakerEntryImpl();

		icebreakerEntryImpl.setUuid(getUuid());
		icebreakerEntryImpl.setIcebreakerEntryId(getIcebreakerEntryId());
		icebreakerEntryImpl.setGroupId(getGroupId());
		icebreakerEntryImpl.setCompanyId(getCompanyId());
		icebreakerEntryImpl.setUserId(getUserId());
		icebreakerEntryImpl.setUserName(getUserName());
		icebreakerEntryImpl.setCreateDate(getCreateDate());
		icebreakerEntryImpl.setModifiedDate(getModifiedDate());
		icebreakerEntryImpl.setStatus(getStatus());
		icebreakerEntryImpl.setName(getName());
		icebreakerEntryImpl.setType(getType());
		icebreakerEntryImpl.setIbIp(getIbIp());
		icebreakerEntryImpl.setIbPort(getIbPort());
		icebreakerEntryImpl.setIbUserId(getIbUserId());
		icebreakerEntryImpl.setIbUserPassword(getIbUserPassword());
		icebreakerEntryImpl.setDescription(getDescription());

		icebreakerEntryImpl.resetOriginalValues();

		return icebreakerEntryImpl;
	}

	@Override
	public int compareTo(IcebreakerEntry icebreakerEntry) {
		int value = 0;

		value = DateUtil.compareTo(
			getCreateDate(), icebreakerEntry.getCreateDate());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof IcebreakerEntry)) {
			return false;
		}

		IcebreakerEntry icebreakerEntry = (IcebreakerEntry)obj;

		long primaryKey = icebreakerEntry.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		IcebreakerEntryModelImpl icebreakerEntryModelImpl = this;

		icebreakerEntryModelImpl._originalUuid = icebreakerEntryModelImpl._uuid;

		icebreakerEntryModelImpl._originalGroupId =
			icebreakerEntryModelImpl._groupId;

		icebreakerEntryModelImpl._setOriginalGroupId = false;

		icebreakerEntryModelImpl._originalCompanyId =
			icebreakerEntryModelImpl._companyId;

		icebreakerEntryModelImpl._setOriginalCompanyId = false;

		icebreakerEntryModelImpl._originalUserId =
			icebreakerEntryModelImpl._userId;

		icebreakerEntryModelImpl._setOriginalUserId = false;

		icebreakerEntryModelImpl._setModifiedDate = false;

		icebreakerEntryModelImpl._originalStatus =
			icebreakerEntryModelImpl._status;

		icebreakerEntryModelImpl._setOriginalStatus = false;

		icebreakerEntryModelImpl._originalType = icebreakerEntryModelImpl._type;

		icebreakerEntryModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<IcebreakerEntry> toCacheModel() {
		IcebreakerEntryCacheModel icebreakerEntryCacheModel =
			new IcebreakerEntryCacheModel();

		icebreakerEntryCacheModel.uuid = getUuid();

		String uuid = icebreakerEntryCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			icebreakerEntryCacheModel.uuid = null;
		}

		icebreakerEntryCacheModel.icebreakerEntryId = getIcebreakerEntryId();

		icebreakerEntryCacheModel.groupId = getGroupId();

		icebreakerEntryCacheModel.companyId = getCompanyId();

		icebreakerEntryCacheModel.userId = getUserId();

		icebreakerEntryCacheModel.userName = getUserName();

		String userName = icebreakerEntryCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			icebreakerEntryCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			icebreakerEntryCacheModel.createDate = createDate.getTime();
		}
		else {
			icebreakerEntryCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			icebreakerEntryCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			icebreakerEntryCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		icebreakerEntryCacheModel.status = getStatus();

		icebreakerEntryCacheModel.name = getName();

		String name = icebreakerEntryCacheModel.name;

		if ((name != null) && (name.length() == 0)) {
			icebreakerEntryCacheModel.name = null;
		}

		icebreakerEntryCacheModel.type = getType();

		String type = icebreakerEntryCacheModel.type;

		if ((type != null) && (type.length() == 0)) {
			icebreakerEntryCacheModel.type = null;
		}

		icebreakerEntryCacheModel.ibIp = getIbIp();

		String ibIp = icebreakerEntryCacheModel.ibIp;

		if ((ibIp != null) && (ibIp.length() == 0)) {
			icebreakerEntryCacheModel.ibIp = null;
		}

		icebreakerEntryCacheModel.ibPort = getIbPort();

		String ibPort = icebreakerEntryCacheModel.ibPort;

		if ((ibPort != null) && (ibPort.length() == 0)) {
			icebreakerEntryCacheModel.ibPort = null;
		}

		icebreakerEntryCacheModel.ibUserId = getIbUserId();

		String ibUserId = icebreakerEntryCacheModel.ibUserId;

		if ((ibUserId != null) && (ibUserId.length() == 0)) {
			icebreakerEntryCacheModel.ibUserId = null;
		}

		icebreakerEntryCacheModel.ibUserPassword = getIbUserPassword();

		String ibUserPassword = icebreakerEntryCacheModel.ibUserPassword;

		if ((ibUserPassword != null) && (ibUserPassword.length() == 0)) {
			icebreakerEntryCacheModel.ibUserPassword = null;
		}

		icebreakerEntryCacheModel.description = getDescription();

		String description = icebreakerEntryCacheModel.description;

		if ((description != null) && (description.length() == 0)) {
			icebreakerEntryCacheModel.description = null;
		}

		return icebreakerEntryCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<IcebreakerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<IcebreakerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IcebreakerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((IcebreakerEntry)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<IcebreakerEntry, Object>>
			attributeGetterFunctions = getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<IcebreakerEntry, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<IcebreakerEntry, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((IcebreakerEntry)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, IcebreakerEntry>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _icebreakerEntryId;
	private long _groupId;
	private long _originalGroupId;
	private boolean _setOriginalGroupId;
	private long _companyId;
	private long _originalCompanyId;
	private boolean _setOriginalCompanyId;
	private long _userId;
	private long _originalUserId;
	private boolean _setOriginalUserId;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private boolean _setModifiedDate;
	private int _status;
	private int _originalStatus;
	private boolean _setOriginalStatus;
	private String _name;
	private String _type;
	private String _originalType;
	private String _ibIp;
	private String _ibPort;
	private String _ibUserId;
	private String _ibUserPassword;
	private String _description;
	private String _descriptionCurrentLanguageId;
	private long _columnBitmask;
	private IcebreakerEntry _escapedModel;

}